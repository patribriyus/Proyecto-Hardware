   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"button.c"
  21              	.Ltext0:
  22              		.file 1 "../button.c"
 1964              		.align	2
 1965              		.global	Eint4567_ISR
 1967              	Eint4567_ISR:
 1968              	.LFB0:
   1:../button.c   **** /*********************************************************************************************
   2:../button.c   **** * Fichero:	button.c
   3:../button.c   **** * Autor:
   4:../button.c   **** * Descrip:	Funciones de manejo de los pulsadores (EINT6-7)
   5:../button.c   **** * Version:
   6:../button.c   **** *********************************************************************************************/
   7:../button.c   **** 
   8:../button.c   **** /*--- ficheros de cabecera ---*/
   9:../button.c   **** #include "button.h"
  10:../button.c   **** #include "8led.h"
  11:../button.c   **** #include "44blib.h"
  12:../button.c   **** #include "44b.h"
  13:../button.c   **** #include "def.h"
  14:../button.c   **** 
  15:../button.c   **** /*--- variables globales del módulo ---*/
  16:../button.c   **** /* int_count la utilizamos para sacar un número por el 8led.
  17:../button.c   ****   Cuando se pulsa un botón sumamos y con el otro restamos. ¡A veces hay rebotes! */
  18:../button.c   **** static unsigned int int_count = 0;
  19:../button.c   **** 
  20:../button.c   **** /* declaración de función que es rutina de servicio de interrupción
  21:../button.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  22:../button.c   **** void Eint4567_ISR(void) __attribute__((interrupt("IRQ")));
  23:../button.c   **** 
  24:../button.c   **** /*--- codigo de funciones ---*/
  25:../button.c   **** void Eint4567_ISR(void)
  26:../button.c   **** {
 1969              		.loc 1 26 0
 1970              		.cfi_startproc
 1971              		@ Interrupt Service Routine.
 1972              		@ args = 0, pretend = 0, frame = 0
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974 0000 04C02DE5 		str	ip, [sp, #-4]!
 1975 0004 0DC0A0E1 		mov	ip, sp
 1976              	.LCFI0:
 1977              		.cfi_def_cfa_register 12
 1978 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
  27:../button.c   **** 	/* Identificar la interrupcion (hay dos pulsadores)*/
  28:../button.c   **** 	int which_int = rEXTINTPND;
 1979              		.loc 1 28 0
 1980 000c 78309FE5 		ldr	r3, .L7
 1981              		.cfi_offset 14, -8
 1982              		.cfi_offset 13, -12
 1983              		.cfi_offset 11, -16
 1984              		.cfi_offset 3, -20
 1985              		.cfi_offset 2, -24
 1986              		.cfi_offset 1, -28
 1987              		.cfi_offset 0, -32
 1988 0010 543093E5 		ldr	r3, [r3, #84]
 1989              	.LVL0:
  29:../button.c   **** 	switch (which_int)
 1990              		.loc 1 29 0
 1991 0014 040053E3 		cmp	r3, #4
  26:../button.c   **** {
 1992              		.loc 1 26 0
 1993 0018 04B04CE2 		sub	fp, ip, #4
 1994              	.LCFI1:
 1995              		.cfi_def_cfa 11, 4
 1996              		.loc 1 29 0
 1997 001c 1000000A 		beq	.L3
 1998 0020 080053E3 		cmp	r3, #8
 1999 0024 1300000A 		beq	.L4
 2000 0028 60009FE5 		ldr	r0, .L7+4
 2001 002c 000090E5 		ldr	r0, [r0, #0]
 2002              	.L5:
  30:../button.c   **** 	{
  31:../button.c   **** 		case 4:
  32:../button.c   **** 			int_count++; // incrementamos el contador
  33:../button.c   **** 			break;
  34:../button.c   **** 		case 8:
  35:../button.c   **** 			int_count--; // decrementamos el contador
  36:../button.c   **** 			break;
  37:../button.c   **** 		default:
  38:../button.c   **** 			break;
  39:../button.c   **** 	}
  40:../button.c   **** 	// }
  41:../button.c   **** 	D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (módulo 16)
 2003              		.loc 1 41 0
 2004 0030 0F0000E2 		and	r0, r0, #15
 2005 0034 FEFFFFEB 		bl	D8Led_symbol
 2006              	.LVL1:
  42:../button.c   **** 
  43:../button.c   **** 	/* Finalizar ISR */
  44:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2007              		.loc 1 44 0
 2008 0038 4CC09FE5 		ldr	ip, .L7
 2009 003c 0F20A0E3 		mov	r2, #15
 2010 0040 54208CE5 		str	r2, [ip, #84]
  45:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2011              		.loc 1 45 0
 2012 0044 1E36A0E3 		mov	r3, #31457280
 2013 0048 241093E5 		ldr	r1, [r3, #36]
 2014 004c 020681E3 		orr	r0, r1, #2097152
 2015 0050 240083E5 		str	r0, [r3, #36]
  46:../button.c   **** }
 2016              		.loc 1 46 0
 2017 0054 1CD04BE2 		sub	sp, fp, #28
 2018 0058 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2019 005c 04C09DE4 		ldmfd	sp!, {ip}
 2020 0060 04F05EE2 		subs	pc, lr, #4
 2021              	.LVL2:
 2022              	.L3:
  32:../button.c   **** 			int_count++; // incrementamos el contador
 2023              		.loc 1 32 0
 2024 0064 24109FE5 		ldr	r1, .L7+4
 2025 0068 002091E5 		ldr	r2, [r1, #0]
 2026 006c 010082E2 		add	r0, r2, #1
 2027 0070 000081E5 		str	r0, [r1, #0]
  33:../button.c   **** 			break;
 2028              		.loc 1 33 0
 2029 0074 EDFFFFEA 		b	.L5
 2030              	.L4:
  35:../button.c   **** 			int_count--; // decrementamos el contador
 2031              		.loc 1 35 0
 2032 0078 10C09FE5 		ldr	ip, .L7+4
 2033 007c 00E09CE5 		ldr	lr, [ip, #0]
 2034 0080 01004EE2 		sub	r0, lr, #1
 2035 0084 00008CE5 		str	r0, [ip, #0]
  36:../button.c   **** 			break;
 2036              		.loc 1 36 0
 2037 0088 E8FFFFEA 		b	.L5
 2038              	.L8:
 2039              		.align	2
 2040              	.L7:
 2041 008c 0000D201 		.word	30539776
 2042 0090 00000000 		.word	.LANCHOR0
 2043              		.cfi_endproc
 2044              	.LFE0:
 2046              		.align	2
 2047              		.global	Eint4567_init
 2049              	Eint4567_init:
 2050              	.LFB1:
  47:../button.c   **** 
  48:../button.c   **** void Eint4567_init(void)
  49:../button.c   **** {
 2051              		.loc 1 49 0
 2052              		.cfi_startproc
 2053              		@ Function supports interworking.
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056              		@ link register save eliminated.
  50:../button.c   **** 	/* Configuracion del controlador de interrupciones. Estos registros están definidos en 44b.h */
  51:../button.c   **** 	rI_ISPC    = 0x3ffffff;	// Borra INTPND escribiendo 1s en I_ISPC
  52:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2057              		.loc 1 52 0
 2058 0094 68209FE5 		ldr	r2, .L10
  51:../button.c   **** 	rI_ISPC    = 0x3ffffff;	// Borra INTPND escribiendo 1s en I_ISPC
 2059              		.loc 1 51 0
 2060 0098 1E36A0E3 		mov	r3, #31457280
 2061 009c 3FC3E0E3 		mvn	ip, #-67108864
 2062 00a0 24C083E5 		str	ip, [r3, #36]
 2063              		.loc 1 52 0
 2064 00a4 0F00A0E3 		mov	r0, #15
  53:../button.c   **** 	rINTMOD    = 0x0;		// Configura las linas como de tipo IRQ
 2065              		.loc 1 53 0
 2066 00a8 0010A0E3 		mov	r1, #0
  54:../button.c   **** 	rINTCON    = 0x1;	    // Habilita int. vectorizadas y la linea IRQ (FIQ no)
 2067              		.loc 1 54 0
 2068 00ac 01C0A0E3 		mov	ip, #1
  52:../button.c   **** 	rEXTINTPND = 0xf;       // Borra EXTINTPND escribiendo 1s en el propio registro
 2069              		.loc 1 52 0
 2070 00b0 540082E5 		str	r0, [r2, #84]
  53:../button.c   **** 	rINTMOD    = 0x0;		// Configura las linas como de tipo IRQ
 2071              		.loc 1 53 0
 2072 00b4 081083E5 		str	r1, [r3, #8]
 2073              		.loc 1 54 0
 2074 00b8 00C083E5 		str	ip, [r3, #0]
  55:../button.c   **** 	rINTMSK    &= ~(BIT_EINT4567); // habilitamos interrupcion linea eint4567 en vector de mascaras
 2075              		.loc 1 55 0
 2076 00bc 0CC093E5 		ldr	ip, [r3, #12]
 2077 00c0 02C6CCE3 		bic	ip, ip, #2097152
 2078 00c4 0CC083E5 		str	ip, [r3, #12]
  56:../button.c   **** 
  57:../button.c   **** 	/* Establece la rutina de servicio para Eint4567 */
  58:../button.c   **** 	pISR_EINT4567 = (int) Eint4567_ISR;
  59:../button.c   **** 
  60:../button.c   **** 	/* Configuracion del puerto G */
  61:../button.c   **** 	rPCONG  = 0xffff;        		// Establece la funcion de los pines (EINT0-7)
 2079              		.loc 1 61 0
 2080 00c8 38C09FE5 		ldr	ip, .L10+4
 2081 00cc 40C082E5 		str	ip, [r2, #64]
  62:../button.c   **** 	rPUPG   = 0x0;                  // Habilita el "pull up" del puerto
 2082              		.loc 1 62 0
 2083 00d0 481082E5 		str	r1, [r2, #72]
  63:../button.c   **** 	rEXTINT = rEXTINT | 0x22222222;   // Configura las lineas de int. como de flanco de bajada
 2084              		.loc 1 63 0
 2085 00d4 30109FE5 		ldr	r1, .L10+8
 2086 00d8 50C092E5 		ldr	ip, [r2, #80]
 2087 00dc 01108CE1 		orr	r1, ip, r1
 2088 00e0 501082E5 		str	r1, [r2, #80]
  64:../button.c   **** 
  65:../button.c   **** 	/* Por precaucion, se vuelven a borrar los bits de INTPND y EXTINTPND */
  66:../button.c   **** 	rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
 2089              		.loc 1 66 0
 2090 00e4 540082E5 		str	r0, [r2, #84]
  67:../button.c   **** 	rI_ISPC   |= BIT_EINT4567;		// borra el bit pendiente en INTPND
 2091              		.loc 1 67 0
 2092 00e8 24C093E5 		ldr	ip, [r3, #36]
  58:../button.c   **** 	pISR_EINT4567 = (int) Eint4567_ISR;
 2093              		.loc 1 58 0
 2094 00ec 1C009FE5 		ldr	r0, .L10+12
 2095 00f0 1C109FE5 		ldr	r1, .L10+16
 2096              		.loc 1 67 0
 2097 00f4 02268CE3 		orr	r2, ip, #2097152
  58:../button.c   **** 	pISR_EINT4567 = (int) Eint4567_ISR;
 2098              		.loc 1 58 0
 2099 00f8 8B0001E5 		str	r0, [r1, #-139]
 2100              		.loc 1 67 0
 2101 00fc 242083E5 		str	r2, [r3, #36]
  68:../button.c   **** }
 2102              		.loc 1 68 0
 2103 0100 1EFF2FE1 		bx	lr
 2104              	.L11:
 2105              		.align	2
 2106              	.L10:
 2107 0104 0000D201 		.word	30539776
 2108 0108 FFFF0000 		.word	65535
 2109 010c 22222222 		.word	572662306
 2110 0110 00000000 		.word	Eint4567_ISR
 2111 0114 FFFF7F0C 		.word	209715199
 2112              		.cfi_endproc
 2113              	.LFE1:
 2115              		.bss
 2116              		.align	2
 2117              		.set	.LANCHOR0,. + 0
 2120              	int_count:
 2121 0000 00000000 		.space	4
 2122              		.text
 2123              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 button.c
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:1964   .text:00000000 $a
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:1967   .text:00000000 Eint4567_ISR
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2041   .text:0000008c $d
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2046   .text:00000094 $a
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2049   .text:00000094 Eint4567_init
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2107   .text:00000104 $d
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2116   .bss:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccAVP5Oc.s:2120   .bss:00000000 int_count
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_symbol
