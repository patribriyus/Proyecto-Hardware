   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.file	"timer2.c"
  21              	.Ltext0:
  22              		.file 1 "../timer2.c"
 1879              		.align	2
 1880              		.global	timer2_ISR
 1882              	timer2_ISR:
 1883              	.LFB0:
   1:../timer2.c   **** /*********************************************************************************************
   2:../timer2.c   **** * Fichero:		timer.c
   3:../timer2.c   **** * Autor:
   4:../timer2.c   **** * Descrip:		funciones de control del timer0 del s3c44b0x
   5:../timer2.c   **** * Version:
   6:../timer2.c   **** *********************************************************************************************/
   7:../timer2.c   **** 
   8:../timer2.c   **** /*--- ficheros de cabecera ---*/
   9:../timer2.c   **** #include "timer2.h"
  10:../timer2.c   **** #include "44b.h"
  11:../timer2.c   **** #include "44blib.h"
  12:../timer2.c   **** 
  13:../timer2.c   **** /*--- variables globales ---*/
  14:../timer2.c   **** // int switch_leds = 0;
  15:../timer2.c   **** volatile int timer2_num_int = 0;
  16:../timer2.c   **** 
  17:../timer2.c   **** /*--- RESUMEN DE REGISTROS USADOS EN TIMER ---*/
  18:../timer2.c   **** /*
  19:../timer2.c   ****  * TFG0: Configuración de prescalado y dead-zone
  20:../timer2.c   ****  * 	- Bits[0:7]   Prescalado de Timers 0 y 1
  21:../timer2.c   ****  *  - Bits[8:15]  Prescalado de Timers 2 y 3
  22:../timer2.c   ****  *  - Bits[16:23] Prescalado de Timers r y 5
  23:../timer2.c   ****  *  - Bits[24:31] Dead Zone
  24:../timer2.c   ****  *
  25:../timer2.c   ****  * TCFG1: Configuraador del divisor de frecuencia
  26:../timer2.c   ****  * - 4 bits por cada Multiplexor. 5 MUX EN TOTAL
  27:../timer2.c   ****  * - Por cada MUX:
  28:../timer2.c   ****  * 		- 0000: Divisor 1/2
  29:../timer2.c   ****  * 		- 0001: Divisor 1/4
  30:../timer2.c   ****  * 		- 0010: Divisor 1/8
  31:../timer2.c   ****  * 		- 0011: Divisor 1/16
  32:../timer2.c   ****  * 		- 01XX: Divisor 1/32
  33:../timer2.c   ****  * 		*Consultar tabla
  34:../timer2.c   ****  *
  35:../timer2.c   ****  * TCON: Controlador del timer
  36:../timer2.c   ****  *  - Bit 0: Start/stop Timer 0
  37:../timer2.c   ****  *  - Bit 1: Manual update Timer 0
  38:../timer2.c   ****  *  - Bit 2: Inverter on/off
  39:../timer2.c   ****  *  - Bit 3: Auto-reload on/off
  40:../timer2.c   ****  *  - Bit 4: Dead Zone on/off
  41:../timer2.c   ****  *  ... Se repite este ciclo por cada timer
  42:../timer2.c   ****  *
  43:../timer2.c   ****  * TCNTBx: Número de ciclos inicial que carga TCNTx
  44:../timer2.c   ****  * TCMPBx: Número de ciclos inicial que carga TCMPx
  45:../timer2.c   ****  * TCNTOx: Valor actual de TCNTx
  46:../timer2.c   ****  */
  47:../timer2.c   **** 
  48:../timer2.c   **** 
  49:../timer2.c   **** /* declaración de función que es rutina de servicio de interrupción
  50:../timer2.c   ****  * https://gcc.gnu.org/onlinedocs/gcc/ARM-Function-Attributes.html */
  51:../timer2.c   **** void timer2_ISR(void) __attribute__((interrupt("IRQ")));
  52:../timer2.c   **** 
  53:../timer2.c   **** /*--- codigo de las funciones ---*/
  54:../timer2.c   **** 
  55:../timer2.c   **** // Cuando llega a 0. El timer LANZA LA INTERRPUCIÓN
  56:../timer2.c   **** void timer2_ISR(void)
  57:../timer2.c   **** {
 1884              		.loc 1 57 0
 1885              		.cfi_startproc
 1886              		@ Interrupt Service Routine.
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890 0000 0F002DE9 		stmfd	sp!, {r0, r1, r2, r3}
 1891              	.LCFI0:
 1892              		.cfi_def_cfa_offset 16
  58:../timer2.c   **** 	timer2_num_int++; // Sumamos 1 la variable timer
 1893              		.loc 1 58 0
 1894 0004 2C309FE5 		ldr	r3, .L2
 1895              		.cfi_offset 3, -4
 1896              		.cfi_offset 2, -8
 1897              		.cfi_offset 1, -12
 1898              		.cfi_offset 0, -16
 1899 0008 001093E5 		ldr	r1, [r3, #0]
 1900 000c 010081E2 		add	r0, r1, #1
 1901 0010 000083E5 		str	r0, [r3, #0]
  59:../timer2.c   **** 	switch_leds = 1; // El main está pendiente de este valor
  60:../timer2.c   **** 
  61:../timer2.c   **** 	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
  62:../timer2.c   **** 
  63:../timer2.c   **** 	// ! Indica FIN de la ISR al controlador de interrupciones
  64:../timer2.c   **** 	// Enmascara la interrupción TIMER2
  65:../timer2.c   **** 	rI_ISPC |= BIT_TIMER2; // BIT_TIMER2 está definido en 44b.h y pone un uno en el bit 11 que correpo
 1902              		.loc 1 65 0
 1903 0014 1E36A0E3 		mov	r3, #31457280
 1904 0018 242093E5 		ldr	r2, [r3, #36]
  59:../timer2.c   **** 	switch_leds = 1; // El main está pendiente de este valor
 1905              		.loc 1 59 0
 1906 001c 18109FE5 		ldr	r1, .L2+4
 1907              		.loc 1 65 0
 1908 0020 022B82E3 		orr	r2, r2, #2048
  59:../timer2.c   **** 	switch_leds = 1; // El main está pendiente de este valor
 1909              		.loc 1 59 0
 1910 0024 0100A0E3 		mov	r0, #1
 1911 0028 000081E5 		str	r0, [r1, #0]
 1912              		.loc 1 65 0
 1913 002c 242083E5 		str	r2, [r3, #36]
  66:../timer2.c   **** 
  67:../timer2.c   **** 	// |= -> Significa que va a mantener el estado de rI_ISPC pero con el nuevo bit indicado. Es decir
  68:../timer2.c   **** 	// entre lo  que ya tiene y el bit entrante.
  69:../timer2.c   **** 
  70:../timer2.c   **** 
  71:../timer2.c   **** 
  72:../timer2.c   **** }
 1914              		.loc 1 72 0
 1915 0030 0F00BDE8 		ldmfd	sp!, {r0, r1, r2, r3}
 1916 0034 04F05EE2 		subs	pc, lr, #4
 1917              	.L3:
 1918              		.align	2
 1919              	.L2:
 1920 0038 00000000 		.word	.LANCHOR0
 1921 003c 00000000 		.word	switch_leds
 1922              		.cfi_endproc
 1923              	.LFE0:
 1925              		.align	2
 1926              		.global	timer2_inicializar
 1928              	timer2_inicializar:
 1929              	.LFB1:
  73:../timer2.c   **** 
  74:../timer2.c   **** // -- Se definen valores de los registros del controlador de interrupciones con las igualdades --
  75:../timer2.c   **** 
  76:../timer2.c   **** void timer2_inicializar(void)
  77:../timer2.c   **** {
 1930              		.loc 1 77 0
 1931              		.cfi_startproc
 1932              		@ Function supports interworking.
 1933              		@ args = 0, pretend = 0, frame = 0
 1934              		@ frame_needed = 0, uses_anonymous_args = 0
 1935              		@ link register save eliminated.
  78:../timer2.c   **** 	/* Configuraion controlador de interrupciones */													
  79:../timer2.c   **** 	rINTMOD = 0x0; // Configura las linas como de tipo IRQ											--- INTERRPUT MODE REGISTER 	(*(v
 1936              		.loc 1 79 0
 1937 0040 1E16A0E3 		mov	r1, #31457280
 1938 0044 00C0A0E3 		mov	ip, #0
  80:../timer2.c   **** 	rINTCON = 0x1; // Habilita interrupciones vectorizadas y la linea IRQ (FIQ no)					--- INTERRUPT C
 1939              		.loc 1 80 0
 1940 0048 0130A0E3 		mov	r3, #1
  79:../timer2.c   **** 	rINTMOD = 0x0; // Configura las linas como de tipo IRQ											--- INTERRPUT MODE REGISTER 	(*(v
 1941              		.loc 1 79 0
 1942 004c 08C081E5 		str	ip, [r1, #8]
 1943              		.loc 1 80 0
 1944 0050 003081E5 		str	r3, [r1, #0]
  81:../timer2.c   **** 	rINTMSK &= ~(BIT_TIMER2); // habilitamos en vector de mascaras de interrupcion el Timer0 		--- INT
 1945              		.loc 1 81 0
 1946 0054 0C0091E5 		ldr	r0, [r1, #12]
 1947 0058 022BC0E3 		bic	r2, r0, #2048
 1948 005c 0C2081E5 		str	r2, [r1, #12]
  82:../timer2.c   **** 							//(bits 26 y 13, BIT_GLOBAL y BIT_TIMER0 están definidos en 44b.h)		--- BIT_TIMER0: (0x1<<13
  83:../timer2.c   **** 
  84:../timer2.c   **** 	// &= ELIMINA BITS -> Es un AND sobre rINTMSK y BIT_TIMER2
  85:../timer2.c   **** 
  86:../timer2.c   **** 	/* Establece la rutina de servicio para TIMER0 */
  87:../timer2.c   **** 	pISR_TIMER2 = (unsigned) timer2_ISR; // Le decimos que es timer2_ISR quién debe tratar la interrup
 1949              		.loc 1 87 0
 1950 0060 30009FE5 		ldr	r0, .L5
 1951 0064 30209FE5 		ldr	r2, .L5+4
  88:../timer2.c   **** 
  89:../timer2.c   **** 	/* Configura el Timer2 */
  90:../timer2.c   **** 	rTCFG0 = 0x0; // ajusta el preescalado. 255 hace referencia a los primeros 8 bits, es decir, tempo
 1952              		.loc 1 90 0
 1953 0068 30309FE5 		ldr	r3, .L5+8
  91:../timer2.c   **** 	rTCFG1 = 0x0; // selecciona la entrada del mux que proporciona el reloj.						--- (*(volatile unsi
  92:../timer2.c   **** 				  // La 00 corresponde a un divisor de 1/2.
  93:../timer2.c   **** 	rTCNTB2 = 65535;// valor inicial de cuenta (la cuenta es descendente)
 1954              		.loc 1 93 0
 1955 006c 30109FE5 		ldr	r1, .L5+12
  87:../timer2.c   **** 	pISR_TIMER2 = (unsigned) timer2_ISR; // Le decimos que es timer2_ISR quién debe tratar la interrup
 1956              		.loc 1 87 0
 1957 0070 B32000E5 		str	r2, [r0, #-179]
  94:../timer2.c   **** 	rTCMPB2 = 0;// valor de comparación
  95:../timer2.c   **** 	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone e
  96:../timer2.c   **** 	rTCON = 0x6000;
 1958              		.loc 1 96 0
 1959 0074 060AA0E3 		mov	r0, #24576
  97:../timer2.c   **** 	/* iniciar timer (bit 0) con auto-reload (bit 3)*/
  98:../timer2.c   **** 	rTCON = 0x9000; // Timer start = 1
 1960              		.loc 1 98 0
 1961 0078 092AA0E3 		mov	r2, #36864
  90:../timer2.c   **** 	rTCFG0 = 0x0; // ajusta el preescalado. 255 hace referencia a los primeros 8 bits, es decir, tempo
 1962              		.loc 1 90 0
 1963 007c 00C083E5 		str	ip, [r3, #0]
  91:../timer2.c   **** 	rTCFG1 = 0x0; // selecciona la entrada del mux que proporciona el reloj.						--- (*(volatile unsi
 1964              		.loc 1 91 0
 1965 0080 04C083E5 		str	ip, [r3, #4]
  93:../timer2.c   **** 	rTCNTB2 = 65535;// valor inicial de cuenta (la cuenta es descendente)
 1966              		.loc 1 93 0
 1967 0084 241083E5 		str	r1, [r3, #36]
  94:../timer2.c   **** 	rTCMPB2 = 0;// valor de comparación
 1968              		.loc 1 94 0
 1969 0088 28C083E5 		str	ip, [r3, #40]
  96:../timer2.c   **** 	rTCON = 0x6000;
 1970              		.loc 1 96 0
 1971 008c 080083E5 		str	r0, [r3, #8]
 1972              		.loc 1 98 0
 1973 0090 082083E5 		str	r2, [r3, #8]
  99:../timer2.c   **** 				  // Manual update = 0
 100:../timer2.c   **** 				  // Inverter = 0
 101:../timer2.c   **** 				  // Timer auto-reload = 1
 102:../timer2.c   **** }
 1974              		.loc 1 102 0
 1975 0094 1EFF2FE1 		bx	lr
 1976              	.L6:
 1977              		.align	2
 1978              	.L5:
 1979 0098 FFFF7F0C 		.word	209715199
 1980 009c 00000000 		.word	timer2_ISR
 1981 00a0 0000D501 		.word	30736384
 1982 00a4 FFFF0000 		.word	65535
 1983              		.cfi_endproc
 1984              	.LFE1:
 1986              		.align	2
 1987              		.global	timer2_empezar
 1989              	timer2_empezar:
 1990              	.LFB2:
 103:../timer2.c   **** 
 104:../timer2.c   **** 
 105:../timer2.c   **** void timer2_empezar() {
 1991              		.loc 1 105 0
 1992              		.cfi_startproc
 1993              		@ Function supports interworking.
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 106:../timer2.c   **** 	timer2_num_int = 0;
 1997              		.loc 1 106 0
 1998 00a8 28209FE5 		ldr	r2, .L8
 107:../timer2.c   **** 	  // La 00 corresponde a un divisor de 1/2.
 108:../timer2.c   **** 	rTCNTB2 = 65535;// valor inicial de cuenta (la cuenta es descendente)
 1999              		.loc 1 108 0
 2000 00ac 28309FE5 		ldr	r3, .L8+4
 106:../timer2.c   **** 	timer2_num_int = 0;
 2001              		.loc 1 106 0
 2002 00b0 00C0A0E3 		mov	ip, #0
 2003              		.loc 1 108 0
 2004 00b4 24109FE5 		ldr	r1, .L8+8
 106:../timer2.c   **** 	timer2_num_int = 0;
 2005              		.loc 1 106 0
 2006 00b8 00C082E5 		str	ip, [r2, #0]
 109:../timer2.c   **** 	rTCMPB2 = 0;// valor de comparación
 110:../timer2.c   **** 	/* establecer update=manual (bit 1) + inverter=on (¿? será inverter off un cero en el bit 2 pone e
 111:../timer2.c   **** 	rTCON = 0x6000;
 2007              		.loc 1 111 0
 2008 00bc 060AA0E3 		mov	r0, #24576
 112:../timer2.c   **** 		/* iniciar timer (bit 0) con auto-reload (bit 3)*/
 113:../timer2.c   **** 	rTCON = 0x9000; // Timer start = 1
 2009              		.loc 1 113 0
 2010 00c0 092AA0E3 		mov	r2, #36864
 108:../timer2.c   **** 	rTCNTB2 = 65535;// valor inicial de cuenta (la cuenta es descendente)
 2011              		.loc 1 108 0
 2012 00c4 241083E5 		str	r1, [r3, #36]
 109:../timer2.c   **** 	rTCMPB2 = 0;// valor de comparación
 2013              		.loc 1 109 0
 2014 00c8 28C083E5 		str	ip, [r3, #40]
 111:../timer2.c   **** 	rTCON = 0x6000;
 2015              		.loc 1 111 0
 2016 00cc 080083E5 		str	r0, [r3, #8]
 2017              		.loc 1 113 0
 2018 00d0 082083E5 		str	r2, [r3, #8]
 114:../timer2.c   **** 	    // Manual update = 0
 115:../timer2.c   ****   	   	// Inverter = 0
 116:../timer2.c   **** 	    // Timer auto-reload = 1
 117:../timer2.c   **** 
 118:../timer2.c   **** }
 2019              		.loc 1 118 0
 2020 00d4 1EFF2FE1 		bx	lr
 2021              	.L9:
 2022              		.align	2
 2023              	.L8:
 2024 00d8 00000000 		.word	.LANCHOR0
 2025 00dc 0000D501 		.word	30736384
 2026 00e0 FFFF0000 		.word	65535
 2027              		.cfi_endproc
 2028              	.LFE2:
 2030              		.align	2
 2031              		.global	timer2_leer
 2033              	timer2_leer:
 2034              	.LFB3:
 119:../timer2.c   **** 
 120:../timer2.c   **** 
 121:../timer2.c   **** unsigned int timer2_leer() {
 2035              		.loc 1 121 0
 2036              		.cfi_startproc
 2037              		@ Function supports interworking.
 2038              		@ args = 0, pretend = 0, frame = 0
 2039              		@ frame_needed = 0, uses_anonymous_args = 0
 2040              		@ link register save eliminated.
 122:../timer2.c   **** 	// TCNTB2 = COUNT BUFFER REGISTER
 123:../timer2.c   **** 	// TCNTO = REGISTRO DE OBSERVACIÓN
 124:../timer2.c   **** 
 125:../timer2.c   **** 	// Múltiplos
 126:../timer2.c   **** 
 127:../timer2.c   **** 	// (rTCNTB2 * timer2_num_int + (rTCNTB2 - rTCNTO2)) / 32;
 128:../timer2.c   **** 	return (timer2_num_int * (rTCNTB2) + (rTCNTB2 - rTCNTO2)) / 32;
 2041              		.loc 1 128 0
 2042 00e4 20309FE5 		ldr	r3, .L11
 2043 00e8 20209FE5 		ldr	r2, .L11+4
 2044 00ec 240093E5 		ldr	r0, [r3, #36]
 2045 00f0 002092E5 		ldr	r2, [r2, #0]
 2046 00f4 241093E5 		ldr	r1, [r3, #36]
 2047 00f8 2CC093E5 		ldr	ip, [r3, #44]
 2048 00fc 01306CE0 		rsb	r3, ip, r1
 2049 0100 923020E0 		mla	r0, r2, r0, r3
 129:../timer2.c   **** }
 2050              		.loc 1 129 0
 2051 0104 A002A0E1 		mov	r0, r0, lsr #5
 2052 0108 1EFF2FE1 		bx	lr
 2053              	.L12:
 2054              		.align	2
 2055              	.L11:
 2056 010c 0000D501 		.word	30736384
 2057 0110 00000000 		.word	.LANCHOR0
 2058              		.cfi_endproc
 2059              	.LFE3:
 2061              		.align	2
 2062              		.global	timer2_parar
 2064              	timer2_parar:
 2065              	.LFB4:
 130:../timer2.c   **** 
 131:../timer2.c   **** unsigned int timer2_parar() {
 2066              		.loc 1 131 0
 2067              		.cfi_startproc
 2068              		@ Function supports interworking.
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              		@ link register save eliminated.
 132:../timer2.c   **** 	rINTMOD = 0x800; // Para evitar que lleguen interrupciones mientras leemos TCNB2 y TCNTO2
 133:../timer2.c   **** 	rTCON = 0x0; // Esto está bien?
 2072              		.loc 1 133 0
 2073 0114 34309FE5 		ldr	r3, .L14
 132:../timer2.c   **** 	rINTMOD = 0x800; // Para evitar que lleguen interrupciones mientras leemos TCNB2 y TCNTO2
 2074              		.loc 1 132 0
 2075 0118 02CBA0E3 		mov	ip, #2048
 2076 011c 1E16A0E3 		mov	r1, #31457280
 2077              		.loc 1 133 0
 2078 0120 0000A0E3 		mov	r0, #0
 132:../timer2.c   **** 	rINTMOD = 0x800; // Para evitar que lleguen interrupciones mientras leemos TCNB2 y TCNTO2
 2079              		.loc 1 132 0
 2080 0124 08C081E5 		str	ip, [r1, #8]
 2081              	.LBB4:
 2082              	.LBB5:
 128:../timer2.c   **** 	return (timer2_num_int * (rTCNTB2) + (rTCNTB2 - rTCNTO2)) / 32;
 2083              		.loc 1 128 0
 2084 0128 24209FE5 		ldr	r2, .L14+4
 2085              	.LBE5:
 2086              	.LBE4:
 2087              		.loc 1 133 0
 2088 012c 080083E5 		str	r0, [r3, #8]
 2089              	.LBB7:
 2090              	.LBB6:
 128:../timer2.c   **** 	return (timer2_num_int * (rTCNTB2) + (rTCNTB2 - rTCNTO2)) / 32;
 2091              		.loc 1 128 0
 2092 0130 240093E5 		ldr	r0, [r3, #36]
 2093 0134 002092E5 		ldr	r2, [r2, #0]
 2094 0138 241093E5 		ldr	r1, [r3, #36]
 2095 013c 2CC093E5 		ldr	ip, [r3, #44]
 2096 0140 01306CE0 		rsb	r3, ip, r1
 2097 0144 923020E0 		mla	r0, r2, r0, r3
 2098              	.LBE6:
 2099              	.LBE7:
 134:../timer2.c   **** 
 135:../timer2.c   **** 	return timer2_leer();
 136:../timer2.c   **** }
 2100              		.loc 1 136 0
 2101 0148 A002A0E1 		mov	r0, r0, lsr #5
 2102 014c 1EFF2FE1 		bx	lr
 2103              	.L15:
 2104              		.align	2
 2105              	.L14:
 2106 0150 0000D501 		.word	30736384
 2107 0154 00000000 		.word	.LANCHOR0
 2108              		.cfi_endproc
 2109              	.LFE4:
 2111              		.global	timer2_num_int
 2112              		.comm	switch_leds,4,4
 2113              		.bss
 2114              		.align	2
 2115              		.set	.LANCHOR0,. + 0
 2118              	timer2_num_int:
 2119 0000 00000000 		.space	4
 2120              		.text
 2121              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer2.c
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1879   .text:00000000 $a
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1882   .text:00000000 timer2_ISR
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1920   .text:00000038 $d
                            *COM*:00000004 switch_leds
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1925   .text:00000040 $a
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1928   .text:00000040 timer2_inicializar
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1979   .text:00000098 $d
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1986   .text:000000a8 $a
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:1989   .text:000000a8 timer2_empezar
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2024   .text:000000d8 $d
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2030   .text:000000e4 $a
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2033   .text:000000e4 timer2_leer
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2056   .text:0000010c $d
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2061   .text:00000114 $a
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2064   .text:00000114 timer2_parar
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2106   .text:00000150 $d
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2118   .bss:00000000 timer2_num_int
C:\Users\danie\AppData\Local\Temp\ccM4P8Ge.s:2114   .bss:00000000 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
